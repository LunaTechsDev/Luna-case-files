//=============================================================================
// Luna_Links.js
//=============================================================================
//=============================================================================
// Build Date: 2020-09-26 18:18:34
//=============================================================================
//=============================================================================
// Made with LunaTea -- Haxe
//=============================================================================

// Generated by Haxe 4.1.3
/*:
@author LunaTechs - Kino
@plugindesc A plugin that lets you create links through clickable windows<LunaLinks>.

@target MV MZ

@param linkWindows
@text Link Windows
@desc The list of link windows on your title screen.
@type struct<LinkWindow>[]

@help

An RPGMakerMV/MZ plugin that lets you create links to websites through clickable
windows<LunaLinks>.

==== How To Use ====

Simply f ill out your link information in the plugin parameters with the proper
coordinates on the screen. The icon you use for your link will be mapped
to the size of the window.

MIT License
Copyright (c) 2020 LunaTechsDev
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE
*/

/*~struct~LinkWindow:
*
* @param link
* @text Link 
* @desc The link for the link window
* @default google.com
*
* @param image
* @text Image Name
* @desc Name of an image in your pictures folder
* @default Actor1_1
*
* @param x
* @text X Position
* @desc The X position of the link window
* @default 0
* 
* @param y
* @text Y Position
* @desc The Y position of the link window
* @default 0
*
* @param width
* @text Width
* @desc The width of the link window
* @default 100
*
* @param height
* @text Height 
* @desc The height of the link window
* @default 100
*
* @param backgroundType
* @text Background Type 0 -> Opaque 1 -> Semitransparent 2 -> Transparent
* @desc The background type of the link window
* @default 2
* 
*/




(function ($hx_exports, $global) { "use strict"
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {};
class EReg {
	constructor(r,opt) {
		this.r = new RegExp(r,opt.split("u").join(""))
	}
	match(s) {
		if(this.r.global) {
			this.r.lastIndex = 0
		}
		this.r.m = this.r.exec(s)
		this.r.s = s
		return this.r.m != null;
	}
}
EReg.__name__ = true
class Lambda {
	static iter(it,f) {
		let x = $getIterator(it)
		while(x.hasNext()) {
			let x1 = x.next()
			f(x1)
		}
	}
}
Lambda.__name__ = true
class LinkWindow extends Window_Base {
	constructor(x,y,width,height) {
		let rect = new Rectangle(x,y,width,height)
		super(rect);
	}
	setLink(link) {
		this._link = link
	}
	setImage(image) {
		let _gthis = this
		this._image = image
		this._image.addLoadListener(function(bitmap) {
			_gthis.refresh()
		})
	}
	update() {
		super.update()
		this.processLinkClick()
	}
	processLinkClick() {
		if(TouchInput.isTriggered() && WindowExtensions.isTouchInsideFrame(this) && WindowExtensions.isOpenOrVisible(this)) {
			window.open(this._link,"_blank")
		}
	}
	refresh() {
		if(this.contents != null) {
			this.contents.clear()
			this.paintImage()
		}
	}
	paintImage() {
		let img = this._image
		let dm_width = img.width
		let dm_height = img.height
		this.contents.blt(this._image,0,0,dm_width,dm_height,0,0,this.contentsWidth(),this.contentsHeight())
	}
}
LinkWindow.__name__ = true
class LunaLinks {
	static main() {
		let _g = []
		let _g1 = 0
		let _g2 = $plugins
		while(_g1 < _g2.length) {
			let v = _g2[_g1]
			++_g1
			if(new EReg("<LunaLinks>","ig").match(v.description)) {
				_g.push(v)
			}
		}
		let plugin = _g[0]
		let params = plugin.parameters
		LunaLinks.Params = { linkWindows : JsonEx.parse(params["linkWindows"]).map(function(win) {
			return JsonEx.parse(win);
		})}
		console.log("src/Main.hx:43:",LunaLinks.Params)
		
//=============================================================================
// Scene_Title
//=============================================================================
      
		let _Scene_Title_linkWindows = Scene_Title.prototype.linkWindows
		Scene_Title.prototype.linkWindows = null
		let _Scene_Title_create = Scene_Title.prototype.create
		Scene_Title.prototype.create = function() {
			_Scene_Title_create.call(this)
			this.createAllLinkWindows()
		}
		let _Scene_Title_createAllLinkWindows = Scene_Title.prototype.createAllLinkWindows
		Scene_Title.prototype.createAllLinkWindows = function() {
			this.linkWindows = []
			let _gthis = this
			Lambda.iter(LunaLinks.params().linkWindows,function(info) {
				let linkWindow = new LinkWindow(info.x,info.y,info.width,info.height)
				console.log("src/TitlePatch.hx:18:",info)
				linkWindow.setLink(info.link)
				let bitmap = ImageManager.loadPicture(info.image,0)
				linkWindow.setImage(bitmap)
				_gthis.addWindow(linkWindow)
				linkWindow.setBackgroundType(info.backgroundType)
				linkWindow.open()
				console.log("src/TitlePatch.hx:25:",linkWindow)
				_gthis.linkWindows.push(linkWindow)
			})
		}
	}
	static params() {
		return LunaLinks.Params;
	}
}
$hx_exports["LunaLinks"] = LunaLinks
LunaLinks.__name__ = true
Math.__name__ = true
class TitlePatch extends Scene_Title {
	constructor() {
		super();
	}
	createAllLinkWindows() {
		this.linkWindows = []
		let _gthis = this
		Lambda.iter(LunaLinks.params().linkWindows,function(info) {
			let linkWindow = new LinkWindow(info.x,info.y,info.width,info.height)
			console.log("src/TitlePatch.hx:18:",info)
			linkWindow.setLink(info.link)
			let bitmap = ImageManager.loadPicture(info.image,0)
			linkWindow.setImage(bitmap)
			_gthis.addWindow(linkWindow)
			linkWindow.setBackgroundType(info.backgroundType)
			linkWindow.open()
			console.log("src/TitlePatch.hx:25:",linkWindow)
			_gthis.linkWindows.push(linkWindow)
		})
	}
}
TitlePatch.__name__ = true
class WindowExtensions {
	static isTouchInsideFrame(win) {
		let touchPos = new PIXI.Point(TouchInput.x,TouchInput.y)
		let localPos = win.worldTransform.applyInverse(touchPos)
		return win.innerRect.contains(localPos.x,localPos.y);
	}
	static isOpenOrVisible(win) {
		if(!win.isOpen()) {
			return win.visible;
		} else {
			return true;
		}
	}
}
WindowExtensions.__name__ = true
class haxe_iterators_ArrayIterator {
	constructor(array) {
		this.current = 0
		this.array = array
	}
	hasNext() {
		return this.current < this.array.length;
	}
	next() {
		return this.array[this.current++];
	}
}
haxe_iterators_ArrayIterator.__name__ = true
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		let t = typeof(o)
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object"
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				let e = $hxEnums[o.__enum__]
				let n = e.__constructs__[o._hx_index]
				let con = e[n]
				if(con.__params__) {
					s = s + "\t"
					return n + "(" + ((function($this) {
						var $r
						let _g = []
						{
							let _g1 = 0
							let _g2 = con.__params__
							while(true) {
								if(!(_g1 < _g2.length)) {
									break
								}
								let p = _g2[_g1]
								_g1 = _g1 + 1
								_g.push(js_Boot.__string_rec(o[p],s))
							}
						}
						$r = _g
						return $r;
					}(this))).join(",") + ")"
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				let str = "["
				s += "\t";
				let _g = 0
				let _g1 = o.length
				while(_g < _g1) {
					let i = _g++
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			let tostr
			try {
				tostr = o.toString
			} catch( _g ) {
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				let s2 = o.toString()
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			let str = "{\n"
			s += "\t";
			let hasp = o.hasOwnProperty != null
			let k = null
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue
			}
			if(str.length != 2) {
				str += ", \n";
			}
			str += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1)
			str += "\n" + s + "}";
			return str;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true
class _$LTGlobals_$ {
}
_$LTGlobals_$.__name__ = true
class utils_Fn {
	static proto(obj) {
		return obj.prototype;
	}
	static updateProto(obj,fn) {
		return (fn)(obj.prototype);
	}
	static updateEntity(obj,fn) {
		return (fn)(obj);
	}
}
utils_Fn.__name__ = true
function $getIterator(o) { if( o instanceof Array ) return new haxe_iterators_ArrayIterator(o); else return o.iterator(); }
String.__name__ = true
Array.__name__ = true
js_Boot.__toStr = ({ }).toString
LunaLinks.listener = new PIXI.utils.EventEmitter()
LunaLinks.main()
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, {})

//# sourceMappingURL=Luna_Links.js.map